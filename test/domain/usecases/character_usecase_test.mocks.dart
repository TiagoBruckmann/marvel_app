// Mocks generated by Mockito 5.4.2 from annotations
// in teste_softdesign/test/domain/usecases/character_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:teste_softdesign/data/datasource/character_remote_datasource.dart'
    as _i2;
import 'package:teste_softdesign/data/models/character_model.dart' as _i7;
import 'package:teste_softdesign/data/repositories/character_repo_impl.dart'
    as _i4;
import 'package:teste_softdesign/domain/failures/failure.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCharactersRemoteDatasource_0 extends _i1.SmartFake
    implements _i2.CharactersRemoteDatasource {
  _FakeCharactersRemoteDatasource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CharacterRepoImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacterRepoImpl extends _i1.Mock implements _i4.CharacterRepoImpl {
  @override
  _i2.CharactersRemoteDatasource get charactersRemoteDatasource =>
      (super.noSuchMethod(
        Invocation.getter(#charactersRemoteDatasource),
        returnValue: _FakeCharactersRemoteDatasource_0(
          this,
          Invocation.getter(#charactersRemoteDatasource),
        ),
        returnValueForMissingStub: _FakeCharactersRemoteDatasource_0(
          this,
          Invocation.getter(#charactersRemoteDatasource),
        ),
      ) as _i2.CharactersRemoteDatasource);

  @override
  _i5.Future<
      _i3.Either<_i6.Failure,
          List<_i7.CharacterModel>>> getCharacters() => (super.noSuchMethod(
        Invocation.method(
          #getCharacters,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.CharacterModel>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.CharacterModel>>(
          this,
          Invocation.method(
            #getCharacters,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.CharacterModel>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.CharacterModel>>(
          this,
          Invocation.method(
            #getCharacters,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.CharacterModel>>>);
}
